# make -f GNUmakefile-builder configure (to create the rights symbolic links)
# make -f GNUmakefile-builder
# The bitness (32 | 64) and configuration (relase | debug) are taken from the environment.

#
# These	example	lines do the job for ORexx/Linux.
#
REXX_INCLUDE_PATH=..
HEADERDEF=-DUSE_REXXSAA_H -DRexxAllocateMemory=malloc \
	  -DPCSZ=PSZ

MY_GCC_FLAGS=-Wall -Wno-self-assign -I$(REXX_INCLUDE_PATH) $(HEADERDEF) -fPIC -DGCI_BITNESS=$(builder_bitness) $(CPPFLAGS) $(CFLAGS)

#
# There	is no need to change anything below for	known systems
###############################################################################
#
OBJ=build/$(builder_system)/$(builder_compiler)/$(builder_config)/$(builder_bitness)
DLEXT=.so

ifeq	  "Linux"		      "$(shell uname -s)"
 ifeq	   "ix86"		      "$(patsubst i%86,ix86,$(shell uname -m))"
		    CVT=linux.i86
		    OSL=unix
 else
  ifeq	   "x86_64"		      "$(shell uname -m)"
		    CVT=linux.86_64
		    OSL=unix
  else
   ifeq	   "alpha"		      "$(shell uname -m)"
		    CVT=linux.alpha
		    OSL=unix
   else
    $(error			      Unsupported/unknown system)
   endif
  endif
 endif
else
 ifeq	   "Darwin Power Macintosh"  "$(shell uname -sm)"
		    CVT=macX.ppc
		    OSL=macX
 else
  ifeq	   "Darwin x86_64"  "$(shell uname -sm)"
		    CVT=macX.all
		    OSL=macX
		    DLEXT=.dylib
  else
   ifeq	   "SunOS"		     "$(shell uname -s)"
		    CVT=solaris.sparc
		    OSL=unix
   else
    $(error			      Unsupported/unknown system)
   endif
  endif
 endif
endif

$(OBJ)/%.o: %.c
	gcc $(MY_GCC_FLAGS) -c -o $@ $<

OBJS=$(OBJ)/gci_convert.o $(OBJ)/gci_prepare.o $(OBJ)/gci_tree.o \
     $(OBJ)/gci_helper.o $(OBJ)/gci_rexxbridge.o $(OBJ)/gci_rxfuncdefine.o \
     $(OBJ)/gci_call.o $(OBJ)/gci_execute.o $(OBJ)/gci_oslink.o

all: $(OBJ) $(OBJ)/libgci$(DLEXT)

$(OBJ)/libgci$(DLEXT): $(OBJS)
	gcc -Wall -I. -g -shared $(LDFLAGS)	\
	    -L$(builder_delivery_dir)/lib -lrexx -lrexxapi \
	    -fPIC	\
	    -o $@ $^

$(OBJ):
	mkdir -p $(OBJ)

$(OBJS): gci.h embedded.h

$(OBJ)/gci_convert.o: gci_convert.c gci_convert.h

# Must disable optimization for this file (-O0)
$(OBJ)/gci_call.o: gci_call.c gci_convert.h
	gcc $(MY_GCC_FLAGS) -O0 -c -o $@ $<

.PHONY:	configure clean cleaner distclean

configure: clean
	@-rm -f	gci_convert.h
	ln -s gci_convert.$(CVT) gci_convert.h
	@-rm -f	gci_oslink.c
	ln -s gci_oslink.$(OSL)	gci_oslink.c

clean:
	rm -f *.bak err
	rm -f $(OBJ)/*.o $(OBJ)/*.so $(OBJ)/*.dylib

cleaner: clean

distclean: cleaner
	rm -f .gdbinit*	try* gci_convert.h gci_oslink.c
