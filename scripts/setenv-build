#!/bin/bash

if [ "$0" = "$BASH_SOURCE" ] ; then echo "Usage : source ${BASH_SOURCE[0]}" ; exit 1 ; fi

# Those variables must be defined before calling this script
if test -z "$builder_config_dir" ; then echo "builder_config_dir is undefined" ; return 1 ; fi

# Associated directory in the build hierarchy
build_dir=$1

# The shared drive provided by vmWare or VirtualBox is TOO SLOW !
# So I put the binary files on a local drive inside the VM.
# The source files remain on the shared drive, I don't want to manage sources per VM.
# The local directory is derived from the delivery directory
export builder_local_dir=`dirname "$build_dir"`

# This is the directory which contains the source, shared by all the platforms (MacOs, Linux, Windows)
# Careful ! Not necessarily equal to builder_local_dir.
# Assumptions : build, official, executor and executor5 are all in the same shared directory.
export builder_shared_dir=$PWD

current=${builder_config_dir#$build_dir/}       # <target[.branch]>/d1/d2/.../system/compiler/config/bitness

# ok, seems redundant with setenv-32 and setenv-64, but it's not.
# we assign the value to builder_bitness, because it may be unassigned if you did not define setenv-32 or setenv-64.
# Here we check that the folder corresponding to the bitness is a valid bitness.
export builder_bitness=`basename "$current"`    # 32, 64
if test "$builder_bitness" != "32" -a "$builder_bitness" != "64"
then
    echo "Invalid bitness: $builder_bitness"
    echo "Expected: 32 or 64"
    return 1
fi

current=`dirname "$current"`                    # <target[.branch]>/d1/d2/.../system/compiler/config
export builder_config=`basename "$current"`     # debug, profiling, reldbg, release
if test "$builder_config" != "debug" -a "$builder_config" != "profiling" -a "$builder_config" != "reldbg" -a "$builder_config" != "release"
then
    echo "Invalid config: $builder_config"
    echo "Expected: debug or profiling or reldbg release"
    return 1
fi

current=`dirname "$current"`                    # <target[.branch]>/d1/d2/.../system/compiler
export builder_compiler=`basename "$current"`

current=`dirname "$current"`                    # <target[.branch]>/d1/d2/.../system
export builder_system=`basename "$current"`

current=`dirname "$current"`                    # <target[.branch]>/d1/d2/...
export builder_target_branch=${current%%/*}     # executor.<branch> or executor5.<branch> or official
export builder_target=${builder_target_branch%%.*} # executor or executor5 or official (never contains '.')
export builder_branch=${builder_target_branch#*.} # branch (can contain zero or one or several '.')
if test $builder_target = $builder_branch ; then builder_branch= ; fi

export builder_src_relative_path=${current#*/}  # d1/d2/...

export builder_src_dir=$builder_shared_dir/$builder_target/$builder_src_relative_path

# build & delivery are subdirectories of the config directory.
export builder_build_dir=$builder_config_dir/build
export builder_delivery_dir=$builder_config_dir/delivery

if test ! -d "$builder_build_dir" ; then mkdir "$builder_build_dir" ; fi
if test ! -d "$builder_delivery_dir" ; then mkdir "$builder_delivery_dir" ; fi
