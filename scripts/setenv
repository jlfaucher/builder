#!/bin/bash

if [ -z "$BASH_VERSION" ]; then
   echo "Works only with bash"
   return 1
fi

if [ "$0" = "$BASH_SOURCE" ] ; then echo "Usage : source ${BASH_SOURCE[0]}" ; exit 1 ; fi

# Path to this script
FILE="${BASH_SOURCE[0]}"
export builder_scripts_dir="$( cd -P "$(dirname "$FILE")" && pwd )"

# load the helpers
. $builder_scripts_dir/shellscriptlib

prepend_path PATH "$builder_scripts_dir"

# THE CURRENT DIRECTORY IS USED AS BUILDER SHARED DIR
# This is the directory which contains the source, shared by all the platforms (MacOs, Linux, Windows)
# Assumptions : build, official, executor and executor5 are all in the same shared directory.
export builder_shared_dir=$PWD

export builder_dir=`dirname "$builder_scripts_dir"`
alias cdbuilder='cd $builder_dir'

# Remember: this argument can be a relative path
dir=$1
if test -z "$dir"
then
    echo Mandatory argument: path to config directory \""build/<target[.branch]>/d1/d2/.../system-arch/compiler/config"\"
    return 1
fi

# config
export builder_config=`basename "$dir"`
case "$builder_config" in
    "debug") ;;
    "profiling") ;;
    "reldbg") ;;
    "release") ;;
    *)
        echo "Invalid config: $builder_config"
        echo "Expected: debug or profiling or reldbg or release"
        return 1
        ;;
esac

# system-arch
current=$dir                                    # <target[.branch]>/d1/d2/.../system-arch/compiler/config
current=`dirname "$current"`                    # <target[.branch]>/d1/d2/.../system-arch/compiler
current=`dirname "$current"`                    # <target[.branch]>/d1/d2/.../system-arch
export builder_system_arch=`basename "$current"`

# Split system-arch into system and arch
IFS="-"; read -ra str_array <<< "$builder_system_arch"; IFS=" "
export builder_system=${str_array[0]}
export builder_arch=${str_array[1]}

# Check system
case "$builder_system" in
    "windows") ;;
    "macos") ;;
    "linux") ;;
    *)
        echo "Invalid system: $builder_system"
        echo "Expected: windows or macos or linux"
        return 1
        ;;
esac

# Check arch
case "$builder_arch" in
    "x86_32") ;;
    "x86_64") ;;
    "arm32") ;;
    "arm64") ;;
    *)
        echo "Invalid architecture: $builder_arch"
        echo "Expected: x86_32 or x86_64 or arm32 or arm64"
        return 1
        ;;
esac

# Check consistency system-arch
if test "$builder_system_arch" != "${builder_system}-${builder_arch}"
then
    echo "Invalid system-arch: $builder_system_arch"
    echo "Expected: only one dash separator"
    return 1
fi

if test ! -d "$dir"
then
    echo $dir
    while true; do
        read -p "Create directory '$dir' (Y/n)?" input
        case $input in
            [Yy]|"" ) mkdir -p "$dir"; break;;
            [Nn]* ) echo "Abort"; return 1;;
        esac
    done
fi
if test ! -d "$dir"
then
    echo Directory "$dir" not found
    return 1
fi

# Fully qualified path
dir="$( cd -P "$dir" && pwd )"

# KEEP THIS DECLARATION HERE, TO HAVE A FULLY QUALIFIED PATH
export builder_config_dir=$dir

export builder_hostname=`hostname -s`

# 2023.07.18: add prefix "builder_private_" to avoid accidental overwriting
builder_private_dir=$dir

# Iterate over each directory, from deeper to root.
# If a script named setenv-<dir> exists in the directory of scripts then execute it.
# If a script named setenv-<dir>-<system-arch>-<computername> exists in the directory of private scripts then execute it.
# If a script named setenv-<dir>-<computername> exists in the directory of private scripts then execute it.
while [ "$builder_private_dir" != "/" ]; do
    builder_private_current=`basename "$builder_private_dir"`
    echo "[builder_private_current="$builder_private_current"]"

    # Script common to all machines
    script=${builder_scripts_dir}/setenv-${builder_private_current}
    if [ -x "$script" ]; then
        echo Running "$script"
        . "$script" "$builder_private_dir"
        if test $? != 0
        then
            return 1
        fi
    fi

    # Private script builder_system_arch + builder_hostname
    script=${builder_scripts_dir}.private/setenv-${builder_private_current}-${builder_system_arch}-${builder_hostname}
    if [ -x "$script" ]; then
        echo Running "$script"
        . "$script" "$builder_private_dir"
        if test $? != 0
        then
            return 1
        fi
    fi

    # Private script builder_hostname
    script=${builder_scripts_dir}.private/setenv-${builder_private_current}-${builder_hostname}
    if [ -x "$script" ]; then
        echo Running "$script"
        . "$script" "$builder_private_dir"
        if test $? != 0
        then
            return 1
        fi
    fi

    builder_private_dir=`dirname "$builder_private_dir"`
done

################################################################################
# Export some settings, to be used from child process
################################################################################

# See ~/.profile which defines $ENV = . ~/.bash_env ($BASH_ENV no longer defined)
# See ~/.bashrc which calls ~/.bash_env
# See ~/.bash_env which calls : . "$REXX_ENVIRONMENT"
# See oorexxshell.rex which executes bash and sh in interactive mode, to have the aliases

export REXX_ENVIRONMENT=$builder_config_dir/rexx_environment
alias > "$REXX_ENVIRONMENT"

# Because of MacOs SIP, I have to redeclare these variables if I want bsf4ooRexx working.
echo "export LD_LIBRARY_PATH=`echo $LD_LIBRARY_PATH`" >> "$REXX_ENVIRONMENT"
echo "export DYLD_LIBRARY_PATH=`echo $DYLD_LIBRARY_PATH`" >> "$REXX_ENVIRONMENT"

export EXECUTOR_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
export EXECUTOR_DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH
