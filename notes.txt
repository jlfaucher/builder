--------------------------------------------------------------------------------
Details of the commands executed by make
--------------------------------------------------------------------------------

make VERBOSE=1 install

Remember: did not find how to select the right directory for build.
So I hardcoded this command in the solution of type nmake:
    e:
    cd E:\Local\rexxlocal\oorexx\build\executor.master\sandbox\jlf\trunk\win\cl\debug\64\build
    nmake VERBOSE=1 install


How to display the response files
https://stackoverflow.com/questions/57358039/how-to-see-the-underlying-compiler-linker-command-line-with-cmake-nmake
nmake has an option to display inline files / response files:
    /U Dump inline files
For recursive make you might want to set this in an environment variable like this:
    set MAKEFLAGS=U
This way, the content of all response files will appear on the console.
---
From cmd:
set MAKEFLAGS=U
devenv /useenv
nmake VERBOSE=1 install


--------------------------------------------------------------------------------
Creating a distribution
--------------------------------------------------------------------------------

From P.O.:
svn update
pkill rxapi
dnf -y -v remove ooRexx
rm -dfr ~/workspace/oorexx-centos8-build/oorexxbuild/
cmake -DBUILD_RPM=1 -DOS_DIST=centos8 -DCMAKE_BUILD_TYPE=RELEASE ../oorexxSVN
make clean
make
cpack ./
dnf -y -v install ~/workspace/oorexx-centos8-build/oorexxbuild/.rpm


--------------------------------------------------------------------------------
Creating a dmg for M1 Mac
--------------------------------------------------------------------------------

From P.O.:
On Jenkins we build everything starting from ~workspace, here are the steps for M1 Mac

# make ooRexx

# Stop and delete existing installation, leave no witnesses
pkill rxapi || true
rm -dfr ~/Applications/ooRexx5

# Clean the build dir to be sure everything is built fresh
rm -dfr oorexxBuild/*

mkdir -p oorexxBuild
cd oorexxBuild

# Installing to ~/Applications
/opt/homebrew/bin/cmake -G "Unix Makefiles" -DBUILD_OSX_UNIVERSAL_BINARIES=1 -DBUILD_DMG=1 -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=~/Applications/ooRexx5 ../oorexxSVN

make clean              # make sure rexx picks up the current build date
make

# install to ~/Applications/ooRexx5 (the installer build uses this so do not change)
make install

# now build the installer with a script generated by CMake
bash ./build_macOS_dmg.sh

The last step in the build chain generates a dmg drag&drop installer that can be used elsewhere.


--------------------------------------------------------------------------------
Technical infos
--------------------------------------------------------------------------------

MacOs File sharing (System preferences/sharing/File sharing)
The name jlfaucher.local is defined in this screen.
Can be modified (button Edit under the field Computer name)


MacOs NFS share
---------------
MacOs /etc/exports
/local              -mapall=502          where 502 is the uid displayed by the command id.
/Users/jlfaucher    -mapall=502

Ubuntu fstab:
jlfaucher.local:/local	            /host/local	nfs	defaults	0	0
jlfaucher.local:/Users/jlfaucher    /host/local nfs defaults    0   0

MacOs SMB share
---------------
MacOs : menu System Preferences, then Sharing
Options : activate SMB, deactivate AFP
Activate file sharing and add /Local1 to the list

Windows SMB client
------------------
(replace Y: by your letter drive)
(replace Z: by your letter drive)

net use
 Y:        \\jlfaucher.local\Local1         Microsoft Windows Network
 Z:        \\vmware-host\Shared Folders     VMware Shared Folders

Must mount Local1 (exported by MacOs - System preferences/sharing/File sharing)
which contains this symbolic link to have
the directory 'Local' under Y:
/Local
/Local1
    Local@ -> /Local

http://superuser.com/questions/555715/mac-os-x-10-8-configure-smbd-to-follow-symbolic-links
Adding no-symlinks as a program argument in smbd's launchdaemon plist did the trick.
The file sharing services do need a restart after changing the file.
/System/Library/LaunchDaemons/com.apple.smbd.plist
<array>
        <string>/usr/sbin/smbd</string>
        <string>-no-symlinks</string>
</array>
[No longer works after upgrade to El-Capitan]
This change has been overwritten when upgrading to El-Capitan.
No longer possible to edit the file smbd.plist because of System Integrity Protection.
I follow a procedure described in https://forums.developer.apple.com/thread/17944:
sudo defaults write /Library/Preferences/com.apple.smbd.plist ProgramArguments -array-add -no-symlinks
Does not work...
Fallback:
sudo cp /System/Library/LaunchDaemons/com.apple.smbd.plist /Library/LaunchDaemons/jlf.smbd.plist
sudo chown root /Library/LaunchDaemons/jlf.smbd.plist
edit jlf.smbd.plist:
- re-apply the change described above
- change the label com.apple.smbd to jlf.smbd (2 occurences)
to do the first time, and to redo after each reboot:
sudo launchctl unload /System/Library/LaunchDaemons/com.apple.smbd.plist
sudo launchctl unload /Library/LaunchDaemons/jlf.smbd.plist
sudo launchctl load -w /Library/LaunchDaemons/jlf.smbd.plist


--------------------------------------------------------------------------------
Old build system: autoconf - automake
--------------------------------------------------------------------------------

https://stackoverflow.com/questions/2531827/what-are-makefile-am-and-makefile-in

DEVELOPER runs these:

1) autoconf - creates shippable configure script (which the installer will run to make the Makefile)
    configure.in -> autoconf -> configure (script) <---- Note! configure.in is depreciated.
    configure.ac -> autoconf -> configure (script) <---- Now use configure.ac / (*.ac = autoconf)
2) automake - creates shippable Makefile.in (which configure will later read to make the Makefile)
    Makefile.am -> automake -> Makefile.in / (*.am = automake)

INSTALLER runs these:

1) ./configure - creates the Makefile (from Makefile.in).
    Makefile.in -> configure -> Makefile (*.in = input file)
2) make - creates the application (from the Makefile just created).
3) sudo make install - installs the application
